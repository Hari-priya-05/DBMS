import tkinter as tk
from tkinter import messagebox, ttk
import pymysql
import matplotlib.pyplot as plt
from datetime import datetime

# Connect to MySQL
def connect_db():
    return pymysql.connect(host="localhost", user="root", password="", database="traffic_db")

# Insert new data
def insert_data():
    location = entry_location.get()
    try:
        vehicle_count = int(entry_vehicle.get())
    except ValueError:
        messagebox.showerror("Input Error", "Vehicle count must be an integer")
        return

    con = connect_db()
    cursor = con.cursor()
    cursor.execute("INSERT INTO traffic_data (location, vehicle_count) VALUES (%s, %s)", (location, vehicle_count))
    con.commit()
    con.close()
    messagebox.showinfo("Success", "Traffic data inserted")
    entry_location.delete(0, tk.END)
    entry_vehicle.delete(0, tk.END)
    update_last_updated()
    show_all_data()

# Graph
def show_graph():
    con = connect_db()
    cursor = con.cursor()
    cursor.execute("SELECT location, SUM(vehicle_count) FROM traffic_data GROUP BY location")
    results = cursor.fetchall()
    con.close()

    if not results:
        messagebox.showinfo("No Data", "No traffic data available to plot")
        return

    locations = [row[0] for row in results]
    vehicle_counts = [row[1] for row in results]
    plt.figure(figsize=(8, 5))
    plt.bar(locations, vehicle_counts, color='dodgerblue')
    plt.title("Vehicle Count per Location")
    plt.xlabel("Location")
    plt.ylabel("Total Vehicle Count")
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Table update
def show_all_data():
    for row in tree.get_children():
        tree.delete(row)

    con = connect_db()
    cursor = con.cursor()
    cursor.execute("SELECT * FROM traffic_data ORDER BY timestamp DESC")
    rows = cursor.fetchall()
    con.close()

    for row in rows:
        tree.insert("", tk.END, values=row)

# Delete entry
def delete_entry():
    id_ = entry_delete.get()
    if not id_.isdigit():
        messagebox.showerror("Input Error", "Enter valid ID")
        return

    con = connect_db()
    cursor = con.cursor()
    cursor.execute("DELETE FROM traffic_data WHERE id=%s", (id_,))
    con.commit()
    con.close()
    messagebox.showinfo("Deleted", f"Record with ID {id_} deleted")
    entry_delete.delete(0, tk.END)
    show_all_data()

# Search
def search_by_location():
    location = entry_search.get()
    if not location:
        messagebox.showerror("Input Error", "Enter a location")
        return

    for row in tree.get_children():
        tree.delete(row)

    con = connect_db()
    cursor = con.cursor()
    cursor.execute("SELECT * FROM traffic_data WHERE location=%s", (location,))
    rows = cursor.fetchall()
    con.close()

    if not rows:
        messagebox.showinfo("Not Found", "No records for this location")
    for row in rows:
        tree.insert("", tk.END, values=row)

# Timestamp
def update_last_updated():
    con = connect_db()
    cursor = con.cursor()
    cursor.execute("SELECT MAX(timestamp) FROM traffic_data")
    result = cursor.fetchone()
    con.close()

    last_updated.set(f"Last Updated: {result[0] if result[0] else 'N/A'}")

# GUI
root = tk.Tk()
root.title("Real-Time Traffic Management System")
root.geometry("950x650")
root.config(bg="#f0f4f7")

# Title
tk.Label(root, text=".^·˙•.⬛ Real-Time Traffic Management System",
         font=("Arial", 20, "bold"), fg="#005b96", bg="#f0f4f7").pack(pady=10)

# Top Input Frame
input_frame = tk.Frame(root, bg="#e0ecf3", padx=10, pady=10, bd=2, relief="groove")
input_frame.pack(pady=10, fill="x", padx=20)

tk.Label(input_frame, text="Location:", bg="#e0ecf3", font=("Arial", 12)).grid(row=0, column=0, padx=5, pady=5)
entry_location = tk.Entry(input_frame, font=("Arial", 12))
entry_location.grid(row=0, column=1, padx=5)

tk.Label(input_frame, text="Vehicle Count:", bg="#e0ecf3", font=("Arial", 12)).grid(row=0, column=2, padx=5, pady=5)
entry_vehicle = tk.Entry(input_frame, font=("Arial", 12))
entry_vehicle.grid(row=0, column=3, padx=5)

tk.Button(input_frame, text="Insert", command=insert_data, bg="#0073e6", fg="white", font=("Arial", 11), width=10).grid(row=0, column=4, padx=10)
tk.Button(input_frame, text="Show Graph", command=show_graph, bg="#0073e6", fg="white", font=("Arial", 11), width=12).grid(row=0, column=5, padx=10)

# Search & Delete Frame
action_frame = tk.Frame(root, bg="#f0f4f7")
action_frame.pack(pady=5)

tk.Label(action_frame, text="Search Location:", font=("Arial", 11), bg="#f0f4f7").grid(row=0, column=0, padx=5)
entry_search = tk.Entry(action_frame, font=("Arial", 11))
entry_search.grid(row=0, column=1, padx=5)
tk.Button(action_frame, text="Search", command=search_by_location, bg="#005b96", fg="white", font=("Arial", 10)).grid(row=0, column=2, padx=5)

tk.Label(action_frame, text="Delete ID:", font=("Arial", 11), bg="#f0f4f7").grid(row=0, column=3, padx=10)
entry_delete = tk.Entry(action_frame, font=("Arial", 11))
entry_delete.grid(row=0, column=4, padx=5)
tk.Button(action_frame, text="Delete", command=delete_entry, bg="#c0392b", fg="white", font=("Arial", 10)).grid(row=0, column=5, padx=5)
tk.Button(action_frame, text="Refresh Table", command=show_all_data, bg="#2e8b57", fg="white", font=("Arial", 10)).grid(row=0, column=6, padx=10)

# Data Table
tree_frame = tk.Frame(root, bd=2, relief="groove")
tree_frame.pack(pady=10, padx=20, fill="both", expand=True)
cols = ("ID", "Location", "Vehicle Count", "Timestamp")
tree = ttk.Treeview(tree_frame, columns=cols, show='headings')

for col in cols:
    tree.heading(col, text=col)
    tree.column(col, anchor="center")

style = ttk.Style()
style.configure("Treeview", font=("Arial", 10), rowheight=25)
style.configure("Treeview.Heading", font=("Arial", 11, "bold"))

scrollbar = ttk.Scrollbar(tree_frame, orient="vertical", command=tree.yview)
scrollbar.pack(side="right", fill="y")
tree.configure(yscroll=scrollbar.set)
tree.pack(fill="both", expand=True)

# Last Updated
last_updated = tk.StringVar()
tk.Label(root, textvariable=last_updated, bg="#f0f4f7", font=("Arial", 10, "italic")).pack(pady=5)

update_last_updated()
show_all_data()

root.mainloop()
